{"version":3,"sources":["Components/TodoItem.js","Components/Todos.js","Components/layout/Header.js","Components/AddTodo.js","Components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","cursor","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","color","border","float","Todos","todos","map","key","headerStyle","textAlign","fontFamily","linkStyle","Header","to","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","About","Fragment","fontStyle","fontSize","App","filter","newTodo","uuidv4","axios","get","then","response","data","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b20b312.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return{\r\n        background: '#f4f4f4',\r\n        padding: '10px',\r\n        borderBottom: '1px #ccc dotted',\r\n        textDecoration: this.props.todo.completed ? 'line-through' : 'none',\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { id,title} = this.props.todo\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                <input type='checkbox' style={{cursor:'pointer'}} onChange={this.props.markComplete.bind(this,id)}/> {''}\r\n                {title}\r\n                <button style={btnStyle} onClick={this.props.delTodo.bind(this,id)}>X</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 10px',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\n\r\nclass Todos extends Component {\r\n  \r\nrender(){\r\n      \r\n    return this.props.todos.map((todo)=>(\r\n     <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete}\r\n                    delTodo={this.props.delTodo}/>\r\n  \r\n  ));\r\n  }\r\n}\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return(\r\n        <header style={headerStyle}>\r\n            <h1>ToDo List</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px',\r\n    fontFamily: 'Arial, Helvetica, sans-serif'\r\n}\r\nconst linkStyle = {\r\n    color:'white',\r\n    textDecoration:'none',\r\n}\r\nexport default Header;","import React, { Component } from 'react'\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title : ''\r\n    }\r\n\r\n    onChange = (e) => {\r\n    //    this.setState({ title: e.target.value })\r\n    // The above line can be written in another way when there will more than one field.\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState( {title : ''} );\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{ display:'flex' }}>\r\n                <input type='text' name='title' placeholder='Add Todo...' style={{flex: '10',\r\n                            padding:'15px'}}\r\n                            value={this.state.title}\r\n                            onChange={this.onChange}/>\r\n                <input type='submit' value='Submit' className='btn' \r\n                style={{flex: '1.5',cursor:'pointer'}}/> \r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p style={{fontStyle:'italic',fontSize:'large'}}>Hey there! This is a Todo List Application built with Reactjs.\r\n                Play around with this application and enjoy adding tasks and deleting tasks.\r\n                See you inside the application!!<br/><br/> Cheers!! </p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n export default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router,Route } from 'react-router-dom';\nimport Todos from './Components/Todos';\nimport Header from './Components/layout/Header';\nimport AddTodo from './Components/AddTodo';\nimport About from './Components/pages/About';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\n\n\n\nclass App extends Component {\n  state = {\n    todos:[]\n  }\n \n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=3')\n    .then(response => this.setState({ todos: response.data }))\n  }\n\n\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed\n      } return todo\n    }) })\n    }\n\n  delTodo = (id) => {\n    this.setState({todos:[...this.state.todos.filter(todo => todo.id !== id)]})\n    \n  }\n  addTodo = (title) => {\n    const newTodo = {\n      id: uuidv4(),\n      title,\n      completed: false\n    }\n    this.setState( { todos: [...this.state.todos, newTodo] } );\n  }\n\n/*\n delTodo = (id) => {\n   axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n   .then(response => this.setState({todos:[...this.state.todos.filter(todo => todo.id !== id)] }))\n }\n \naddTodo = (title) => {\n   axios.post('https://jsonplaceholder.typicode.com/todos',{\n    title,\n    completed: false\n   })\n   .then(response => this.setState({ todos: [...this.state.todos,response.data] }))\n  }\n*/\n render(){\n    \n  return (\n    <Router>\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header />\n        <Route exact path=\"/\" render={props => (\n          <React.Fragment>\n            <AddTodo addTodo={this.addTodo}/>\n            <Todos todos={this.state.todos} markComplete={this.markComplete} \n            delTodo={this.delTodo}/>\n          </React.Fragment>\n        )} />\n        <Route path=\"/about\" component={About} />\n      </div>\n    </div>\n    </Router>\n  );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}